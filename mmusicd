#!/bin/bash 

home="$HOME/.config/mmusic"

playlists="$home/playlists"
upcoming="$home/upcomingmusic"

tmp="/tmp/mmusic-$USER"
fifo="$tmp/fifo"
stoploop="$tmp/stoploop"
playing="$tmp/playing"
pausedfile="$tmp/paused"
currentplaylist="$tmp/playlist"
israndom="$tmp/israndom"

if [[ ! -a "$home" ]]; then
    echo "Creating home at \"$home\""
    mkdir "$home"
fi

if [[ ! -a "$upcoming" ]]; then
    touch "$upcoming"
fi

if [[ ! -a "$playlists" ]]; then
    mkdir "$playlists"
fi

function usage {
    echo "usage:"
    echo "   $0 command [options]"
    echo
    echo "      help                - shows this."
    echo
    echo "      start [playlist]    - starts playing playlist or playlist main if none given."
    echo
    echo "      playlist-file       - prints the current playlist files contents."
    echo "      upcoming-file       - print the upcoming file."
    echo "      playing             - prints the currently playing song or nothing if not playing."
    echo
    echo "      add [playlist|upcoming|next] file-or-folder-to-add"
    echo "                          - add's the file or all [mp3|flac|m4a|ogg] files inside the folder to playlist. If there is no playlist with that name a new one will be created. If playlist is upcoming then the files are added to upcoming. If next then they are added to the begining of upcoming."
    echo "      remove [playlist|upcoming] n"
    echo "                          - Removes line n from playlist." 
    echo "      clear               - Clears the upcoming file."
    echo
    echo "      pause               - Pauses playing."
    echo "      ispaused            - Echos \"yes\" if paused else \"no\" (note: no output if not running)."
    echo "      stop                - Stops the daemon."
    echo "      skip                - Skips current song."
    echo
    echo "      random              - Toggle random."
    echo "      israndom            - Echo \"yes\" if random else \"no\"."
    echo
    echo "      play file           - Plays file."
    echo
    echo "      playlists           - Lists playlists."
    echo "      change playlist     - Stop's song and changes to playlist."
    echo
}

function checktmp {
    if [[ ! -a "$tmp" ]]; then
        exit 1
    fi
}

function play {
    old=`cat "$upcoming"`
    song="$1"
    echo "$song" > "$tmp/newup"
    cat "$upcoming" >> "$tmp/newup"
    cat "$tmp/newup" > "$upcoming"
    rm "$tmp/newup"
    echo "quit" > "$fifo"

    [[ -a "$pausedfile" ]] && rm "$pausedfile"
}

function setplaylist {
    playlist="$1"

    if [[ ! -a "$playlist" ]]; then
        playlist="$playlists/$1"
        if [[ ! -a "$playlist" ]]; then
            echo "Could not find playlist \"$1\""
            exit
        fi
    fi
    
    LINES=`cat "$playlist" | wc -l`
    if [[ "$LINES" -eq "0" ]]; then
        echo "\"$1\" is empty so I will not play it."
        exit
    fi

    if [[ -a "$currentplaylist" ]]; then
        rm "$currentplaylist"
    fi

    ln -s "$playlist" "$currentplaylist"
}

function startplaying {
   if [[ -a "$fifo" ]]; then
        exitd
        exit
    fi
    
    if [[ ! -a $playing ]]; then
        touch $playing
    fi
        
    mkfifo "$fifo"
    touch "$israndom"

    for (( ; ; ))
    do
        song=`popupcoming`

        if [[ -z "$song" ]]; then
            if [[ -a "$israndom" ]]; then
                song=`getrandom`
            else
                song=`getnext`
            fi
        fi

        echo "$song" > "$playing"
        mpv --audio-display=no -really-quiet -input-file="$fifo" "$song"
	    
        if [[ -a "$stoploop" ]]; then
            break
        fi

        sleep 0.1
    done
   
    rm -r "$tmp"
}

function popupcoming {
    checktmp

    next=`cat "$upcoming" | head -1`
    echo "$next"

    tail -n +2 "$upcoming" > $tmp/upcoming
    cat $tmp/upcoming > "$upcoming"
    rm $tmp/upcoming
}

function getrandom {
    checktmp

    RAND=`od -d -N2 -An /dev/urandom`
    LINES=`cat "$currentplaylist" | wc -l`
    N=$(( RAND % LINES + 1 ))
    LINE=`head -$N $currentplaylist | tail -1`
    echo "$LINE"
}

function getnext {
    checktmp

    playing_raw="`cat $playing`"
    playing_clean="`echo $playing_raw | \
        sed "s/\[/\\\\\[/g" | sed "s/\]/\\\\\]/g"`"
    songs=`grep -A1 "$playing_clean" "$currentplaylist"`
    song=`echo "$songs" | tail -n1`
    echo "$song"
}

function skip {
    checktmp

    echo "quit" > "$fifo"
    if [[ -a "$pausedfile" ]]; then
        rm "$pausedfile"
    fi
}

function exitd {
    checktmp

    touch "$stoploop"
    if [[ -a "$fifo" ]]; then
        echo "quit" > $fifo
    fi
}

function sortlist {
    sort -f "$1" | uniq > "$tmp/sorting"
    cat "$tmp/sorting" > "$1"
    rm "$tmp/sorting"
}

function add {
    file="$2"
    pos="$1"

    tmp1="/tmp/add_tmp"

    touch "$tmp1"

    for f in "${@:3}"
    do
        if [[ -d "$f" ]]; then
            cd "$f"
            find "$PWD/"* -regextype posix-extended -iregex \
                ".*(mp3|flac|m4a|ogg)" >> "$tmp1"
	   	    
        elif [[ -a "$f" ]]; then
            echo "$f" >> "$tmp1"
        else
            echo "No such file $f"
        fi
    done
    
    if [[ "$pos" == "start" ]]; then
        tmp2="/tmp/add_tmp_2"
        cat "$tmp1" > "$tmp2"
        cat "$file" >> "$tmp2"
        cat "$tmp2" > "$file"
        rm "$tmp2"
    else
        cat "$tmp1" >> "$file"
    fi

    rm "$tmp1"
}

function remove {
    l=`cat "$1" | wc -l`
    n=$(($2 - 1))
    m=$(($l - $2))

    cat "$1" | head -$n > /tmp/newfile
    cat "$1" | tail -$m >> /tmp/newfile
    cat /tmp/newfile > "$1"
    rm /tmp/newfile
}

if [[ "$1" == "play" ]]; then
    play "$2"

elif [[ "$1" == "clear" ]]; then
    rm "$upcoming"
    touch "$upcoming"

elif [[ "$1" == "skip" ]]; then
    skip

elif [[ "$1" == "stop" ]]; then
    exitd 

elif [[ "$1" == "add" ]]; then
    if [[ "$2" == "upcoming" ]]; then
    	file="$upcoming"
	    pos="end"
    elif [[ "$2" == "next" ]]; then
	    file="$upcoming"
	    pos="start"
    else
	    file="$playlists/$2"
	    if [[ ! -a "$file" ]]; then
	        touch "$file"
	    fi
	    pos="sort"
    fi

    add "$pos" "$file" "${@:3}"
    if [[ "$pos" == "sort" ]]; then
	    sortlist "$file"
    fi

elif [[ "$1" == "remove" ]]; then
    if [[ "$2" == "upcoming" ]]; then
        file="$upcoming"
    else
        file="$playlists/$2"
    fi
    
    remove "$file" "$3"

elif [[ "$1" == "playing" ]]; then
    if [[ -a "$playing" ]]; then
        cat "$playing"
    else
        echo "Not playing"
    fi

elif [[ "$1" == "upcoming-file" ]]; then
    cat "$upcoming"

elif [[ "$1" == "playlist-file" ]]; then
    cat "$currentplaylist"

elif [[ "$1" == "pause" ]]; then
    checktmp

    echo "pause" > "$fifo"
    if [[ -a "$pausedfile" ]]; then
        rm "$pausedfile"
    else
        touch "$pausedfile"
    fi

elif [[ "$1" == "ispaused" ]]; then
    checktmp

    if [[ -a "$pausedfile" ]]; then
        echo "yes"
    else
        echo "no"
    fi

elif [[ "$1" == "random" ]]; then
    if [[ -a "$israndom" ]]; then
        rm "$israndom"
    else
        touch "$israndom"
    fi

elif [[ "$1" == "israndom" ]]; then
    if [[ -a "$israndom" ]]; then
        echo "yes"
    else
        echo "no"
    fi

elif [[ "$1" == "playlists" ]]; then
    ls "$playlists"

elif [[ "$1" == "change" ]]; then
    if [[ ! -a "$tmp" ]]; then
        $0 start
    fi

    setplaylist "$2"
    skip
 
elif [[ "$1" == "start" ]]; then
    if [[ ! -a "$tmp" ]]; then
        mkdir "$tmp";
    else
        exit
    fi

    
    if [[ -z "$2" ]]; then
        setplaylist "$playlists/main"
    else
        setplaylist "$2"
    fi

    startplaying &
else
    if [[ "$1" != "help" ]]; then
        echo "Unknown option '$1'"
    fi
    usage
fi

